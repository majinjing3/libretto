{
  "name": "Libretto",
  "tagline": "Libretto is a Golang library to create Virtual Machines (VM) on any cloud and Virtual Machine hosting platforms such as AWS, Azure, OpenStack, vSphere, or VirtualBox.",
  "body": "[![License][License-Image]][License-URL] [![ReportCard][ReportCard-Image]][ReportCard-URL] [![Build][Build-Status-Image]][Build-Status-URL] [![GoDoc][GoDoc-Image]][GoDoc-URL]\r\n\r\nLibretto\r\n===============\r\n\r\nLibretto is a Golang library to create Virtual Machines (VM) on any cloud and\r\nVirtual Machine hosting platforms such as AWS, Azure, OpenStack, vSphere,\r\nor VirtualBox. Different providers have different utilities and API interfaces\r\nto achieve that, but the abstractions of their interfaces are quite similar.\r\n\r\nSupported Providers\r\n====================\r\n* vSphere > 5.0\r\n* AWS\r\n* Openstack (Mirantis)\r\n* VMware Fusion >= 8.0\r\n* VMware Workstation >= 8.0\r\n* Virtualbox >= 4.3.30\r\n* Azure\r\n* DigitalOcean\r\n\r\nGetting Started\r\n================\r\n\r\n`go get github.com/apcera/libretto/...`\r\n\r\n`go build ./...`\r\n\r\nExamples\r\n==========\r\n\r\nAWS\r\n----\r\n\r\n``` go\r\n\r\nrawKey, err := ioutil.ReadFile(*key)\r\nif err != nil {\r\n        return err\r\n}\r\n\r\nvm := &aws.VM{\r\n        Name:         \"libretto-aws\",\r\n        AMI:          \"ami-984734\",\r\n        InstanceType: \"m4.large\",\r\n        SSHCreds: ssh.Credentials{\r\n                SSHUser:       \"ubuntu\",\r\n                SSHPrivateKey: string(rawKey),\r\n        },\r\n        DeviceName:    \"/dev/sda1\",\r\n        Region:        \"ap-northeast-1\",\r\n        KeyPair:       strings.TrimSuffix(filepath.Base(*key), filepath.Ext(*key)),\r\n        SecurityGroup: \"sg-9fdsfds\",\r\n}\r\n\r\nif err := aws.ValidCredentials(vm.Region); err != nil {\r\n        return err\r\n}\r\n\r\nif err := vm.Provision(); err != nil {\r\n        return err\r\n}\r\n\r\n```\r\n\r\nvSphere\r\n--------\r\n\r\n``` go\r\n\r\nvm := &vsphere.VM{\r\n        Host:       \"10.2.1.11\",\r\n        Username:   \"username\",\r\n        Password:   \"password\",\r\n        Datacenter: \"test-dc\",\r\n        Datastores: \"datastore1, datastore2\",\r\n        Networks:   \"network1\",\r\n        Credentials: ssh.Credentials{\r\n            SSHUser:     \"ubuntu\",\r\n            SSHPassword: \"ubuntu\",\r\n        },\r\n        SkipExisting: true,\r\n        DestinationName: \"Host1\",\r\n        DestinationType: \"host\",\r\n        Name: \"test-vm\",\r\n        Template: \"test-template\",\r\n        OvfPath: \"/Users/Test/Downloads/file.ovf\",\r\n}\r\nif err := vm.Provision(); err != nil {\r\n        return err\r\n}\r\n```\r\n\r\nDigital Ocean\r\n-------------\r\n\r\n``` go\r\ntoken := os.Getenv(\"DIGITALOCEAN_API_KEY\")\r\nif token == \"\" {\r\n    return fmt.Errorf(\"Please export your DigitalOcean API key to 'DIGITALOCEAN_API_KEY' and run again.\")\r\n}\r\nconfig := digitalocean.Config{\r\n    Name:   defaultDropletName,\r\n    Region: defaultDropletRegion,\r\n    Image:  defaultDropletImage,\r\n    Size:   defaultDropletSize,\r\n}\r\n\r\nvm := digitalocean.VM{\r\n    ApiToken: token,\r\n    Config:   config,\r\n}\r\n\r\nif err := vm.Provision(); err != nil {\r\n    return err\r\n}\r\n```\r\n\r\nVirtualbox\r\n-------------\r\n\r\n``` go\r\n\r\nvar config virtualbox.Config\r\nconfig.NICs = []virtualbox.NIC{\r\n    virtualbox.NIC{Idx: 1, Backing: virtualbox.Bridged, BackingDevice: \"en0: Wi-Fi (AirPort)\"},\r\n}\r\nvm := virtualbox.VM{Src: \"/Users/Admin/vm-bfb21a62-60c5-11e5-9fc5-a45e60e45ad5.ova\",\r\n    Credentials: ssh.Credentials{\r\n        SSHUser:     \"ubuntu\",\r\n        SSHPassword: \"ubuntu\",\r\n    },\r\n    Config: config,\r\n}\r\nif err := vm.Provision(); err != nil {\r\n    return err\r\n}\r\n```\r\n\r\nVMware Fusion/Workstation (vmrun)\r\n---------------------------------\r\n\r\n``` go\r\nvar config vmrun.Config\r\nconfig.NICs = []vmrun.NIC{\r\n    vmrun.NIC{Idx: 0, Backing: vmrun.Nat, BackingDevice: \"en0\"},\r\n}\r\nvm := vmrun.VM{Src: \"/Users/Admin/vmware_desktop/trusty-orchestrator-dev.vmx\",\r\n    Dst: \"/Users/Admin/Documents/VMs\",\r\n    Credentials: ssh.Credentials{\r\n        SSHUser:     \"ubuntu\",\r\n        SSHPassword: \"ubuntu\",\r\n    },\r\n    Config: config,\r\n}\r\nif err := vm.Provision(); err != nil {\r\n    return err\r\n}\r\n```\r\n\r\nOpenstack\r\n---------\r\n\r\n``` go\r\n\r\n    metadata := openstack.NewDefaultImageMetadata()\r\n\tvolume := openstack.NewDefaultVolume()\r\n\r\n\tvm := &openstack.VM{\r\n\t\tIdentityEndpoint: os.Getenv(\"OS_AUTH_URL\"),\r\n\t\tUsername:         os.Getenv(\"OS_USERNAME\"),\r\n\t\tPassword:         os.Getenv(\"OS_PASSWORD\"),\r\n\t\tRegion:           os.Getenv(\"OS_REGION_NAME\"),\r\n\t\tTenantName:       os.Getenv(\"OS_TENANT_NAME\"),\r\n\t\tFlavorName:       \"m1.medium\",\r\n\t\tImageID:          \"\",\r\n\t\tImageMetadata:    metadata,\r\n\t\tImagePath:        os.Getenv(\"OS_IMAGE_PATH\"),\r\n\t\tVolume:           volume,\r\n\t\tInstanceID:       \"\",\r\n\t\tName:             \"test\",\r\n\t\tNetworks:         []string{\"eab29109-3363-4b03-8a56-8fe27b71f3a0\"},\r\n\t\tFloatingIPPool:   \"net04_ext\",\r\n\t\tFloatingIP:       nil,\r\n\t\tSecurityGroup:    \"test\",\r\n\t\tCredentials: ssh.Credentials{\r\n\t\t\tSSHUser:     \"ubuntu\",\r\n\t\t\tSSHPassword: \"ubuntu\",\r\n\t\t},\r\n\t}\r\n\r\n\terr := vm.Provision()\r\n\tif err != nil {\r\n        return err\r\n\t}\r\n ```\r\n\r\nFAQ\r\n===\r\n\r\n* Why write Libretto?\r\n\r\nWe couldn't find a suitable Golang binding for this functionality, so we\r\ncreated this library. There are a couple of similar libraries but not in golang\r\n(fog.io in ruby, jcloud in java, libcloud in python).\r\n\r\nDocker Machine is an effort toward that direction, but it is very Docker\r\nspecific, and its providers dictate the VM images in many cases to reduce the\r\nnumber of parameters, but reduces the flexibility of the tool.\r\n\r\n* What is the scope for Libretto?\r\n\r\nVirtual machine creation and life cycle\r\nmanagement as well as common configuration steps during a deploy such as\r\nconfiguring SSH keys.\r\n\r\n* Why use this library over other tools?\r\n\r\nActively used and developed. Can be called natively from Go in a Go application\r\ninstead of shelling out to other tools.\r\n\r\nKnown Issues\r\n=============\r\n\r\n*  Virtualbox networking is limited to using Bridged mode.\r\n\r\n  Host to guest OS connectivity is not possible when using NAT networking in\r\n  Virtualbox. As a result, presently networking configuration for VMs\r\n  provisioned using the Virtualbox provider is limited to using Bridged\r\n  networking. There should be a DHCP server running on the network that the VMs\r\n  are bridged to.\r\n\r\nSupported Platforms\r\n====================\r\n* Linux x64\r\n* Windows 7 >= x64\r\n* OS X >= 10.11\r\n\r\nOther Operating Systems might work but have not been tested.\r\n\r\nAdding Provisioners\r\n=========================\r\n\r\nCreate a new package inside the `virtualmachine` folder and implement the\r\nLibretto `VirtualMachine` interface. The provider should work at the minimum on\r\nthe Linux, Windows and OS X platforms unless it is a platform specific provider\r\nin which case it should at least compile and return a descriptive error.\r\n\r\nDependencies should be versioned and stored using `Godeps`\r\n(https://github.com/tools/godep)\r\n\r\nErrors should be lower case so that they can be wrapped by the calling code. If\r\npossible, types defined in the top level `virtualmachine` package should be\r\nreused.\r\n\r\nContributors\r\n=============\r\n\r\n* David Liu\r\n* Jaime Pi√±a\r\n* Josh Ellithorpe\r\n* Kerim Oktay\r\n* Lirui Li\r\n* Preet Bhinder\r\n* Ryan Boehning\r\n\r\n[License-URL]: https://opensource.org/licenses/Apache-2.0\r\n[License-Image]: https://img.shields.io/:license-apache-blue.svg\r\n[ReportCard-URL]: https://goreportcard.com/report/github.com/apcera/libretto\r\n[ReportCard-Image]: http://goreportcard.com/badge/apcera/libretto\r\n[Build-Status-URL]: http://travis-ci.org/apcera/libretto\r\n[Build-Status-Image]: https://travis-ci.org/apcera/libretto.svg?branch=master\r\n[GoDoc-URL]: https://godoc.org/github.com/apcera/libretto\r\n[GoDoc-Image]: https://godoc.org/github.com/apcera/libretto?status.svg",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}